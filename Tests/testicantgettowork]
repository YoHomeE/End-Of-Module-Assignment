import unittest
from unittest.mock import patch, MagicMock
from server import Server

class TestServer(unittest.TestCase):
    """Test cases for the Server class."""

    def setUp(self):
        self.server = Server()

    def test_send_data(self):
        # Create a mock connection
        mock_conn = MagicMock()

        # Call the send_data method
        self.server.send_data(mock_conn, "Test Message")

        # Assert that the send method of the mock connection was called once
        mock_conn.send.assert_called_once()

    def test_receive_data(self):
        # Create a mock connection
        mock_conn = MagicMock()

        # Set up the mock connection to return "Test Data" when recv is called
        mock_conn.recv.return_value = b"Test Data"

        # Call the receive_data method
        data = self.server.receive_data(mock_conn)

        # Assert that the recv method of the mock connection was called with the correct buffer size
        mock_conn.recv.assert_called_once_with(4096)

        # Assert that the received data is as expected
        self.assertEqual(data, "Test Data")

    @patch("server.Server.receive_data", side_effect=[b"test.txt", b"encrypted", b"Sample File Content"])
    def test_receive_metadata(self, mock_receive_data):
        # Create a mock connection and address
        mock_conn = MagicMock()
        mock_addr = "127.0.0.1"

        # Call the receive_metadata method
        metadata = self.server.receive_metadata(mock_conn, mock_addr)

        # Define the expected metadata dictionary
        expected_metadata = {
            "file_name": "test.txt",
            "file_type": "txt",
            "content": b"Sample File Content",
            "encryption_status": True,
        }

        # Assert that the receive_data method was called with the correct arguments
        mock_receive_data.assert_called_once_with(mock_conn)

        # Assert that the received metadata is as expected
        self.assertEqual(metadata, expected_metadata)

if __name__ == '__main__':
    unittest.main()
